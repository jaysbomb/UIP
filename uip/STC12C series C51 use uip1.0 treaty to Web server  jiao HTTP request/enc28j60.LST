C51 COMPILER V8.12   ENC28J60                                                              04/21/2011 21:03:37 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE ENC28J60
OBJECT MODULE PLACED IN .\release\enc28j60.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE enc28j60.c LARGE BROWSE DEBUG OBJECTEXTEND OBJECT(.\release\enc28j60.obj)

line level    source

   1          #include "enc28j60.h"
   2          #include "spi.h"
   3          
   4          #define MIN(a,b) (a) < (b) ? (a) : (b)
   5          idata u8_t Enc28j60Bank;
   6          idata u16_t NextPacketPtr;
   7          
   8          /// ENC28J60 
   9          void delay_us(int t1)
  10          {
  11   1              while(t1--);
  12   1      }
  13          
  14          void delay_ms(int t1)
  15          { 
  16   1              idata int i; 
  17   1              while(t1--) 
  18   1              {
  19   2                      i=100;
  20   2                      while(i--);
  21   2              }
  22   1      }
  23          
  24          u8_t enc28j60ReadOp(u8_t op, u8_t address)
  25          {
  26   1              u8_t dat1;
  27   1              // activate CS  
  28   1              CSN =0;
  29   1              // issue read command
  30   1              WriteByte(op | (address & ADDR_MASK));  
  31   1              dat1 = ReadByte();
  32   1              // do dummy read if needed (for mac and mii, see datasheet page 29)
  33   1              if(address & 0x80)      dat1 = ReadByte();
  34   1              // release CS
  35   1              CSN=1;
  36   1              return(dat1);
  37   1      }
  38          
  39          void enc28j60WriteOp(u8_t op, u8_t address, u8_t mydat)
  40          {
  41   1              CSN=0;
  42   1              // issue write command
  43   1              WriteByte( op | (address & ADDR_MASK));
  44   1              // write data
  45   1              WriteByte(mydat);
  46   1              CSN=1;
  47   1      }
  48          
  49          void enc28j60SetBank(u8_t address)
  50          {
  51   1              if((address & BANK_MASK) != Enc28j60Bank)
  52   1              {
  53   2                      enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
  54   2                      enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
  55   2                      Enc28j60Bank = (address & BANK_MASK);
C51 COMPILER V8.12   ENC28J60                                                              04/21/2011 21:03:37 PAGE 2   

  56   2              }
  57   1      }
  58          
  59          u8_t enc28j60Read(u8_t address)
  60          {
  61   1              enc28j60SetBank(address);       
  62   1              return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
  63   1      }
  64          
  65          void enc28j60Write(u8_t address, u8_t mydat)
  66          {
  67   1              enc28j60SetBank(address);
  68   1              enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, mydat);
  69   1      }
  70          
  71          u16_t enc28j60_read_phyreg(u8_t address)
  72          {
  73   1              u16_t mydat;
  74   1              enc28j60Write(MIREGADR, address);
  75   1              enc28j60Write(MICMD, MICMD_MIIRD);
  76   1              
  77   1              // Loop to wait until the PHY register has been read through the MII
  78   1              // This requires 10.24us
  79   1              while( (enc28j60Read(MISTAT) & MISTAT_BUSY) );
  80   1              
  81   1              // Stop reading
  82   1              enc28j60Write(MICMD, MICMD_MIIRD);
  83   1              
  84   1              // Obtain results and return
  85   1              mydat = enc28j60Read ( MIRDL );
  86   1              mydat |= enc28j60Read ( MIRDH );
  87   1      
  88   1              return mydat;
  89   1      }
  90          
  91          void enc28j60PhyWrite(u8_t address, u16_t mydat)
  92          {
  93   1              // set the PHY register address
  94   1              enc28j60Write(MIREGADR, address);
  95   1              // write the PHY data
  96   1              enc28j60Write(MIWRL, mydat & 0x00ff);
  97   1              enc28j60Write(MIWRH, mydat >> 8);
  98   1              // wait until the PHY write completes
  99   1              while(enc28j60Read(MISTAT) & MISTAT_BUSY)
 100   1              {
 101   2                      delay_us(15);
 102   2              }
 103   1      }
 104          
 105          void enc28j60ReadBuffer(u16_t len, u8_t* dat)
 106          {
 107   1      
 108   1              CSN = 0;
 109   1              WriteByte(ENC28J60_READ_BUF_MEM);
 110   1              while(len--)
 111   1              {
 112   2                      *dat++ = ReadByte();
 113   2              }       
 114   1              CSN = 1;
 115   1      }
 116          
 117          void enc28j60WriteBuffer(u16_t len, u8_t* dat)
C51 COMPILER V8.12   ENC28J60                                                              04/21/2011 21:03:37 PAGE 3   

 118          {
 119   1              CSN = 0;
 120   1              WriteByte(ENC28J60_WRITE_BUF_MEM);
 121   1              while(len--)
 122   1              {
 123   2                      WriteByte(*dat++);
 124   2              }       
 125   1              CSN = 1;
 126   1      }
 127          
 128          #define ETHERNET_MIN_PACKET_LENGTH      0x3C
 129          #define ETHERNET_HEADER_LENGTH          0x0E
 130          
 131          #define IP_TCP_HEADER_LENGTH 40
 132          #define TOTAL_HEADER_LENGTH (IP_TCP_HEADER_LENGTH+ETHERNET_HEADER_LENGTH)
 133          
 134          void enc28j60PacketSend(u16_t len, u8_t* packet)
 135          {
 136   1              // Set the write pointer to start of transmit buffer area
 137   1              enc28j60Write(EWRPTL, TXSTART_INIT);
 138   1              enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 139   1      
 140   1              // Set the TXND pointer to correspond to the packet size given
 141   1              enc28j60Write(ETXNDL, (TXSTART_INIT+len));
 142   1              enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 143   1      
 144   1              // write per-packet control byte
 145   1              enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 146   1      
 147   1              // TODO, fix this up
 148   1      
 149   1              if( uip_len <= TOTAL_HEADER_LENGTH )
 150   1              {
 151   2                      // copy the packet into the transmit buffer
 152   2                      enc28j60WriteBuffer(len, packet);
 153   2              }
 154   1              else
 155   1              {
 156   2                      len -= TOTAL_HEADER_LENGTH;
 157   2                      enc28j60WriteBuffer(TOTAL_HEADER_LENGTH, packet);
 158   2                      enc28j60WriteBuffer(len, (unsigned char *)uip_appdata);
 159   2              }
 160   1              // send the contents of the transmit buffer onto the network
 161   1              enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 162   1      }
 163          
 164          
 165          
 166          
 167          u16_t enc28j60PacketReceive(u16_t maxlen, u8_t* packet)
 168          {
 169   1              u16_t rxstat;
 170   1              u16_t len;
 171   1              u16_t rs,re;
 172   1      
 173   1              // check if a packet has been received and buffered
 174   1              if( !(enc28j60Read(EIR) & EIR_PKTIF) )
 175   1              {
 176   2                      // Errata workaround #6, PKTIF is not reliable
 177   2                      // double check by looking at EPKTCNT
 178   2                      if (enc28j60Read(EPKTCNT) == 0)
 179   2                              return 0;
C51 COMPILER V8.12   ENC28J60                                                              04/21/2011 21:03:37 PAGE 4   

 180   2              }
 181   1      
 182   1              // Set the read pointer to the start of the received packet
 183   1              enc28j60Write(ERDPTL, (NextPacketPtr));
 184   1              enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
 185   1      
 186   1              // read the next packet pointer
 187   1              NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 188   1              NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 189   1      
 190   1              // read the packet length
 191   1              len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 192   1              len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 193   1      
 194   1              // read the receive status
 195   1              rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 196   1              rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 197   1      
 198   1              // limit retrieve length
 199   1              // (we reduce the MAC-reported length by 4 to remove the CRC)
 200   1              len = MIN(len, maxlen);
 201   1      
 202   1              // copy the packet from the receive buffer
 203   1              enc28j60ReadBuffer(len, packet);
 204   1              rs = enc28j60Read(ERXSTH);
 205   1              rs <<= 8;
 206   1              rs |= enc28j60Read(ERXSTL);
 207   1              re = enc28j60Read(ERXNDH);
 208   1              re <<= 8;
 209   1              re |= enc28j60Read(ERXNDL);
 210   1              if (NextPacketPtr - 1 < rs || NextPacketPtr - 1 > re)
 211   1              {
 212   2                      enc28j60Write(ERXRDPTL, (re));
 213   2                      enc28j60Write(ERXRDPTH, (re)>>8);
 214   2              }
 215   1              else
 216   1              {
 217   2                      enc28j60Write(ERXRDPTL, (NextPacketPtr-1));
 218   2                      enc28j60Write(ERXRDPTH, (NextPacketPtr-1)>>8);
 219   2              }
 220   1      
 221   1              // decrement the packet counter indicate we are done with this packet
 222   1              enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 223   1      
 224   1              return len;
 225   1      }
 226          
 227          void enc28j60_init(void)
 228          {
 229   1              // perform system reset
 230   1              enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 231   1              delay_ms(5);
 232   1      
 233   1              // set receive buffer start address
 234   1              NextPacketPtr = RXSTART_INIT;
 235   1              enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 236   1              enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 237   1      
 238   1              // set receive pointer address
 239   1              enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 240   1              enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 241   1      
C51 COMPILER V8.12   ENC28J60                                                              04/21/2011 21:03:37 PAGE 5   

 242   1              // set receive buffer end
 243   1              // ERXND defaults to 0x1FFF (end of ram)
 244   1              enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 245   1              enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 246   1      
 247   1              // set transmit buffer start
 248   1              // ETXST defaults to 0x0000 (beginnging of ram)
 249   1              enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 250   1              enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 251   1      
 252   1              // do bank 2 stuff
 253   1              // enable MAC receive
 254   1              enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 255   1      
 256   1              // bring MAC out of reset
 257   1              enc28j60Write(MACON2, 0x00);
 258   1      
 259   1              // enable automatic padding and CRC operations
 260   1              enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 261   1      
 262   1              // set inter-frame gap (non-back-to-back)
 263   1              enc28j60Write(MAIPGL, 0x12);
 264   1              enc28j60Write(MAIPGH, 0x0C);
 265   1              // set inter-frame gap (back-to-back)
 266   1              enc28j60Write(MABBIPG, 0x12);
 267   1              // Set the maximum packet size which the controller will accept
 268   1              enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);      
 269   1              enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 270   1      
 271   1              // do bank 3 stuff
 272   1              // write MAC address
 273   1              // NOTE: MAC address in ENC28J60 is byte-backward
 274   1              enc28j60Write(MAADR5, UIP_ETHADDR0);
 275   1              enc28j60Write(MAADR4, UIP_ETHADDR1);
 276   1              enc28j60Write(MAADR3, UIP_ETHADDR2);
 277   1              enc28j60Write(MAADR2, UIP_ETHADDR3);
 278   1              enc28j60Write(MAADR1, UIP_ETHADDR4);
 279   1              enc28j60Write(MAADR0, UIP_ETHADDR5);
 280   1      
 281   1              // no loopback of transmitted frames
 282   1              enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 283   1      
 284   1              // switch to bank 0
 285   1              enc28j60SetBank(ECON1);
 286   1      
 287   1              // enable interrutps
 288   1              enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 289   1      
 290   1              // enable packet reception
 291   1              enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 292   1      }
 293          
 294          void tapdev_init(void)
 295          {
 296   1              enc28j60_init();
 297   1      }
 298          
 299          u16_t tapdev_read(void)
 300          {
 301   1              return enc28j60PacketReceive(UIP_BUFSIZE, uip_buf);
 302   1      }
 303          
C51 COMPILER V8.12   ENC28J60                                                              04/21/2011 21:03:37 PAGE 6   

 304          void tapdev_send(void)
 305          {
 306   1              enc28j60PacketSend(uip_len, uip_buf);
 307   1      }
 308          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1190    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      38
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      3       2
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
