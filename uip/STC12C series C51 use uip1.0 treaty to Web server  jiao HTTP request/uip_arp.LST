C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE UIP_ARP
OBJECT MODULE PLACED IN .\release\uip_arp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE uip_arp.c LARGE BROWSE DEBUG OBJECTEXTEND OBJECT(.\release\uip_arp.obj)

line level    source

   1          /**
   2           * \addtogroup uip
   3           * @{
   4           */
   5          
   6          /**
   7           * \defgroup uiparp uIP Address Resolution Protocol
   8           * @{
   9           *
  10           * The Address Resolution Protocol ARP is used for mapping between IP
  11           * addresses and link level addresses such as the Ethernet MAC
  12           * addresses. ARP uses broadcast queries to ask for the link level
  13           * address of a known IP address and the host which is configured with
  14           * the IP address for which the query was meant, will respond with its
  15           * link level address.
  16           *
  17           * \note This ARP implementation only supports Ethernet.
  18           */
  19           
  20          /**
  21           * \file
  22           * Implementation of the ARP Address Resolution Protocol.
  23           * \author Adam Dunkels <adam@dunkels.com>
  24           *
  25           */
  26          
  27          /*
  28           * Copyright (c) 2001-2003, Adam Dunkels.
  29           * All rights reserved.
  30           *
  31           * Redistribution and use in source and binary forms, with or without
  32           * modification, are permitted provided that the following conditions
  33           * are met:
  34           * 1. Redistributions of source code must retain the above copyright
  35           *    notice, this list of conditions and the following disclaimer.
  36           * 2. Redistributions in binary form must reproduce the above copyright
  37           *    notice, this list of conditions and the following disclaimer in the
  38           *    documentation and/or other materials provided with the distribution.
  39           * 3. The name of the author may not be used to endorse or promote
  40           *    products derived from this software without specific prior
  41           *    written permission.
  42           *
  43           * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
  44           * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  45           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  46           * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
  47           * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  48           * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  49           * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  50           * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  51           * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  52           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  53           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  54           *
  55           * This file is part of the uIP TCP/IP stack.
C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 2   

  56           *
  57           * $Id: uip_arp.c,v 1.8 2006/06/02 23:36:21 adam Exp $
  58           *
  59           */
  60          
  61          
  62          #include "uip_arp.h"
  63          
  64          #include <string.h>
  65          
  66          struct arp_hdr {
  67            struct uip_eth_hdr ethhdr;
  68            u16_t hwtype;
  69            u16_t protocol;
  70            u8_t hwlen;
  71            u8_t protolen;
  72            u16_t opcode;
  73            struct uip_eth_addr shwaddr;
  74            u16_t sipaddr[2];
  75            struct uip_eth_addr dhwaddr;
  76            u16_t dipaddr[2];
  77          };
  78          
  79          struct ethip_hdr {
  80            struct uip_eth_hdr ethhdr;
  81            /* IP header. */
  82            u8_t vhl,
  83              tos,
  84              len[2],
  85              ipid[2],
  86              ipoffset[2],
  87              ttl,
  88              proto;
  89            u16_t ipchksum;
  90            u16_t srcipaddr[2],
  91              destipaddr[2];
  92          };
  93          
  94          #define ARP_REQUEST 1
  95          #define ARP_REPLY   2
  96          
  97          #define ARP_HWTYPE_ETH 1
  98          
  99          struct arp_entry {
 100            u16_t ipaddr[2];
 101            struct uip_eth_addr ethaddr;
 102            u8_t time;
 103          };
 104          
 105          static const struct uip_eth_addr broadcast_ethaddr =
 106            {{0xff,0xff,0xff,0xff,0xff,0xff}};
 107          static const u16_t broadcast_ipaddr[2] = {0xffff,0xffff};
 108          
 109          static struct arp_entry arp_table[UIP_ARPTAB_SIZE];
 110          static u16_t ipaddr[2];
 111          static u8_t i, c;
 112          
 113          static u8_t arptime;
 114          static u8_t tmpage;
 115          
 116          #define BUF   ((struct arp_hdr *)&uip_buf[0])
 117          #define IPBUF ((struct ethip_hdr *)&uip_buf[0])
C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 3   

 118          /*-----------------------------------------------------------------------------------*/
 119          /**
 120           * Initialize the ARP module.
 121           *
 122           */
 123          /*-----------------------------------------------------------------------------------*/
 124          void
 125          uip_arp_init(void)
 126          {
 127   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 128   2          memset(arp_table[i].ipaddr, 0, 4);
 129   2        }
 130   1      }
 131          /*-----------------------------------------------------------------------------------*/
 132          /**
 133           * Periodic ARP processing function.
 134           *
 135           * This function performs periodic timer processing in the ARP module
 136           * and should be called at regular intervals. The recommended interval
 137           * is 10 seconds between the calls.
 138           *
 139           */
 140          /*-----------------------------------------------------------------------------------*/
 141          void
 142          uip_arp_timer(void)
 143          {
 144   1        struct arp_entry *tabptr;
 145   1        
 146   1        ++arptime;
 147   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 148   2          tabptr = &arp_table[i];
 149   2          if((tabptr->ipaddr[0] | tabptr->ipaddr[1]) != 0 &&
 150   2             arptime - tabptr->time >= UIP_ARP_MAXAGE) {
 151   3            memset(tabptr->ipaddr, 0, 4);
 152   3          }
 153   2        }
 154   1      
 155   1      }
 156          /*-----------------------------------------------------------------------------------*/
 157          static void
 158          uip_arp_update(u16_t *ipaddr, struct uip_eth_addr *ethaddr)
 159          {
 160   1        register struct arp_entry *tabptr;
 161   1        /* Walk through the ARP mapping table and try to find an entry to
 162   1           update. If none is found, the IP -> MAC address mapping is
 163   1           inserted in the ARP table. */
 164   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 165   2      
 166   2          tabptr = &arp_table[i];
 167   2          /* Only check those entries that are actually in use. */
 168   2          if(tabptr->ipaddr[0] != 0 &&
 169   2             tabptr->ipaddr[1] != 0) {
 170   3      
 171   3            /* Check if the source IP address of the incoming packet matches
 172   3               the IP address in this ARP table entry. */
 173   3            if(ipaddr[0] == tabptr->ipaddr[0] &&
 174   3               ipaddr[1] == tabptr->ipaddr[1]) {
 175   4               
 176   4              /* An old entry found, update this and return. */
 177   4              memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 178   4              tabptr->time = arptime;
 179   4      
C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 4   

 180   4              return;
 181   4            }
 182   3          }
 183   2        }
 184   1      
 185   1        /* If we get here, no existing ARP table entry was found, so we
 186   1           create one. */
 187   1      
 188   1        /* First, we try to find an unused entry in the ARP table. */
 189   1        for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 190   2          tabptr = &arp_table[i];
 191   2          if(tabptr->ipaddr[0] == 0 &&
 192   2             tabptr->ipaddr[1] == 0) {
 193   3            break;
 194   3          }
 195   2        }
 196   1      
 197   1        /* If no unused entry is found, we try to find the oldest entry and
 198   1           throw it away. */
 199   1        if(i == UIP_ARPTAB_SIZE) {
 200   2          tmpage = 0;
 201   2          c = 0;
 202   2          for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 203   3            tabptr = &arp_table[i];
 204   3            if(arptime - tabptr->time > tmpage) {
 205   4              tmpage = arptime - tabptr->time;
 206   4              c = i;
 207   4            }
 208   3          }
 209   2          i = c;
 210   2          tabptr = &arp_table[i];
 211   2        }
 212   1      
 213   1        /* Now, i is the ARP table entry which we will fill with the new
 214   1           information. */
 215   1        memcpy(tabptr->ipaddr, ipaddr, 4);
 216   1        memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
 217   1        tabptr->time = arptime;
 218   1      }
 219          /*-----------------------------------------------------------------------------------*/
 220          /**
 221           * ARP processing for incoming IP packets
 222           *
 223           * This function should be called by the device driver when an IP
 224           * packet has been received. The function will check if the address is
 225           * in the ARP cache, and if so the ARP cache entry will be
 226           * refreshed. If no ARP cache entry was found, a new one is created.
 227           *
 228           * This function expects an IP packet with a prepended Ethernet header
 229           * in the uip_buf[] buffer, and the length of the packet in the global
 230           * variable uip_len.
 231           */
 232          /*-----------------------------------------------------------------------------------*/
 233          #if 0
              void
              uip_arp_ipin(void)
              {
                uip_len -= sizeof(struct uip_eth_hdr);
                      
                /* Only insert/update an entry if the source IP address of the
                   incoming IP packet comes from a host on the local network. */
                if((IPBUF->srcipaddr[0] & uip_netmask[0]) !=
C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 5   

                   (uip_hostaddr[0] & uip_netmask[0])) {
                  return;
                }
                if((IPBUF->srcipaddr[1] & uip_netmask[1]) !=
                   (uip_hostaddr[1] & uip_netmask[1])) {
                  return;
                }
                uip_arp_update(IPBUF->srcipaddr, &(IPBUF->ethhdr.src));
                
                return;
              }
              #endif /* 0 */
 254          /*-----------------------------------------------------------------------------------*/
 255          /**
 256           * ARP processing for incoming ARP packets.
 257           *
 258           * This function should be called by the device driver when an ARP
 259           * packet has been received. The function will act differently
 260           * depending on the ARP packet type: if it is a reply for a request
 261           * that we previously sent out, the ARP cache will be filled in with
 262           * the values from the ARP reply. If the incoming ARP packet is an ARP
 263           * request for our IP address, an ARP reply packet is created and put
 264           * into the uip_buf[] buffer.
 265           *
 266           * When the function returns, the value of the global variable uip_len
 267           * indicates whether the device driver should send out a packet or
 268           * not. If uip_len is zero, no packet should be sent. If uip_len is
 269           * non-zero, it contains the length of the outbound packet that is
 270           * present in the uip_buf[] buffer.
 271           *
 272           * This function expects an ARP packet with a prepended Ethernet
 273           * header in the uip_buf[] buffer, and the length of the packet in the
 274           * global variable uip_len.
 275           */
 276          /*-----------------------------------------------------------------------------------*/
 277          void
 278          uip_arp_arpin(void)
 279          {
 280   1        
 281   1        if(uip_len < sizeof(struct arp_hdr)) {
 282   2          uip_len = 0;
 283   2          return;
 284   2        }
 285   1        uip_len = 0;
 286   1        
 287   1        switch(BUF->opcode) {
 288   2        case HTONS(ARP_REQUEST):
 289   2          /* ARP request. If it asked for our address, we send out a
 290   2             reply. */
 291   2          if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 292   3            /* First, we register the one who made the request in our ARP
 293   3               table, since it is likely that we will do more communication
 294   3               with this host in the future. */
 295   3            uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 296   3            
 297   3            /* The reply opcode is 2. */
 298   3            BUF->opcode = HTONS(2);
 299   3      
 300   3            memcpy(BUF->dhwaddr.addr, BUF->shwaddr.addr, 6);
 301   3            memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 302   3            memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 303   3            memcpy(BUF->ethhdr.dest.addr, BUF->dhwaddr.addr, 6);
C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 6   

 304   3            
 305   3            BUF->dipaddr[0] = BUF->sipaddr[0];
 306   3            BUF->dipaddr[1] = BUF->sipaddr[1];
 307   3            BUF->sipaddr[0] = uip_hostaddr[0];
 308   3            BUF->sipaddr[1] = uip_hostaddr[1];
 309   3      
 310   3            BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 311   3            uip_len = sizeof(struct arp_hdr);
 312   3          }
 313   2          break;
 314   2        case HTONS(ARP_REPLY):
 315   2          /* ARP reply. We insert or update the ARP table if it was meant
 316   2             for us. */
 317   2          if(uip_ipaddr_cmp(BUF->dipaddr, uip_hostaddr)) {
 318   3            uip_arp_update(BUF->sipaddr, &BUF->shwaddr);
 319   3          }
 320   2          break;
 321   2        }
 322   1      
 323   1        return;
 324   1      }
 325          /*-----------------------------------------------------------------------------------*/
 326          /**
 327           * Prepend Ethernet header to an outbound IP packet and see if we need
 328           * to send out an ARP request.
 329           *
 330           * This function should be called before sending out an IP packet. The
 331           * function checks the destination IP address of the IP packet to see
 332           * what Ethernet MAC address that should be used as a destination MAC
 333           * address on the Ethernet.
 334           *
 335           * If the destination IP address is in the local network (determined
 336           * by logical ANDing of netmask and our IP address), the function
 337           * checks the ARP cache to see if an entry for the destination IP
 338           * address is found. If so, an Ethernet header is prepended and the
 339           * function returns. If no ARP cache entry is found for the
 340           * destination IP address, the packet in the uip_buf[] is replaced by
 341           * an ARP request packet for the IP address. The IP packet is dropped
 342           * and it is assumed that they higher level protocols (e.g., TCP)
 343           * eventually will retransmit the dropped packet.
 344           *
 345           * If the destination IP address is not on the local network, the IP
 346           * address of the default router is used instead.
 347           *
 348           * When the function returns, a packet is present in the uip_buf[]
 349           * buffer, and the length of the packet is in the global variable
 350           * uip_len.
 351           */
 352          /*-----------------------------------------------------------------------------------*/
 353          void
 354          uip_arp_out(void)
 355          {
 356   1        struct arp_entry *tabptr;
 357   1        
 358   1        /* Find the destination IP address in the ARP table and construct
 359   1           the Ethernet header. If the destination IP addres isn't on the
 360   1           local network, we use the default router's IP address instead.
 361   1      
 362   1           If not ARP table entry is found, we overwrite the original IP
 363   1           packet with an ARP request for the IP address. */
 364   1      
 365   1        /* First check if destination is a local broadcast. */
C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 7   

 366   1        if(uip_ipaddr_cmp(IPBUF->destipaddr, broadcast_ipaddr)) {
 367   2          memcpy(IPBUF->ethhdr.dest.addr, broadcast_ethaddr.addr, 6);
 368   2        } else {
 369   2          /* Check if the destination address is on the local network. */
 370   2          if(!uip_ipaddr_maskcmp(IPBUF->destipaddr, uip_hostaddr, uip_netmask)) {
 371   3            /* Destination address was not on the local network, so we need to
 372   3               use the default router's IP address instead of the destination
 373   3               address when determining the MAC address. */
 374   3            uip_ipaddr_copy(ipaddr, uip_draddr);
 375   3          } else {
 376   3            /* Else, we use the destination IP address. */
 377   3            uip_ipaddr_copy(ipaddr, IPBUF->destipaddr);
 378   3          }
 379   2            
 380   2          for(i = 0; i < UIP_ARPTAB_SIZE; ++i) {
 381   3            tabptr = &arp_table[i];
 382   3            if(uip_ipaddr_cmp(ipaddr, tabptr->ipaddr)) {
 383   4              break;
 384   4            }
 385   3          }
 386   2      
 387   2          if(i == UIP_ARPTAB_SIZE) {
 388   3            /* The destination address was not in our ARP table, so we
 389   3               overwrite the IP packet with an ARP request. */
 390   3      
 391   3            memset(BUF->ethhdr.dest.addr, 0xff, 6);
 392   3            memset(BUF->dhwaddr.addr, 0x00, 6);
 393   3            memcpy(BUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 394   3            memcpy(BUF->shwaddr.addr, uip_ethaddr.addr, 6);
 395   3          
 396   3            uip_ipaddr_copy(BUF->dipaddr, ipaddr);
 397   3            uip_ipaddr_copy(BUF->sipaddr, uip_hostaddr);
 398   3            BUF->opcode = HTONS(ARP_REQUEST); /* ARP request. */
 399   3            BUF->hwtype = HTONS(ARP_HWTYPE_ETH);
 400   3            BUF->protocol = HTONS(UIP_ETHTYPE_IP);
 401   3            BUF->hwlen = 6;
 402   3            BUF->protolen = 4;
 403   3            BUF->ethhdr.type = HTONS(UIP_ETHTYPE_ARP);
 404   3      
 405   3            uip_appdata = &uip_buf[UIP_TCPIP_HLEN + UIP_LLH_LEN];
 406   3          
 407   3            uip_len = sizeof(struct arp_hdr);
 408   3            return;
 409   3          }
 410   2      
 411   2          /* Build an ethernet header. */
 412   2          memcpy(IPBUF->ethhdr.dest.addr, tabptr->ethaddr.addr, 6);
 413   2        }
 414   1        memcpy(IPBUF->ethhdr.src.addr, uip_ethaddr.addr, 6);
 415   1        
 416   1        IPBUF->ethhdr.type = HTONS(UIP_ETHTYPE_IP);
 417   1      
 418   1        uip_len += sizeof(struct uip_eth_hdr);
 419   1      }
 420          /*-----------------------------------------------------------------------------------*/
 421          
 422          /** @} */
 423          /** @} */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1535    ----
C51 COMPILER V8.12   UIP_ARP                                                               04/21/2011 21:03:36 PAGE 8   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    106      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
